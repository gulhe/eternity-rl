@document.meta
title: todo
authors: pierrotlc
categories: notes
created: 2023-03-08
updated: 2023-07-16
@end

* TODO
  - ( ) Add a rotation invariant regularizer loss (if not using a GNN or G-CNN).
  - ( ) Cut the rollout based on the last minimum score (remove the first useless moves).
  -- Useless with the new reward base solely on the current state of the puzzle.
  - (x) Use a better rollout buffer, sample more and rollout less.
  - (x) Use a value network to quickly estimate the value of a state => shallow MCTS!
  - Do the full rollout inside the treesearch. Use the entire rollout to compute returns.
  -- Better TD estimate.
  -- Can do Generalized Advantage Estimation.
  -- Add to the rollout buffer only at the end, when we have computed the return.
     How to dynamically compute the TD error if the value network is changing?
  -- Option to add all the duplicated instance actions to the rollout or only the
     best ones.

* Ideas
  - Do MCTS once the model is trained and see if it is better than the model alone.
  - Do a deeper head for each separate action.
  - Use MC sampling to sample the actions based on the result of the multiple simulations.
  - Once a model is trained, it is possible to do a soft MCTS:
  ~~ Start from a random state.
  ~~ Duplicate the state into many (many) batch games.
  ~~ Do a rollout with random sampling for each games in the batch.
  ~~ Aggregate the final results and apply the actions that led to the best final (maximum) state.
  ~~ Go back to point B
  -- This should enhance the overall search for a solution. It may be possible to apply this search
     with many different games in parallel, and to make the search over and over.
  -- It may be possible to implement this on multiple GPUs?
  - Do a continuously learning model.
  -- It could just play forever and constantly learn from its previous actions.
  - Instead of using an experience replay buffer, why don't I just play multiple subgames
    for each sample of the batch?
  -- Since playing a game is computionally light, it may be possible to play a lot of games
     in parallel.
  -- This is like a replay buffer, but with fresh samples (from the current policy) each time.
