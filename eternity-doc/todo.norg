@document.meta
title: todo
authors: pierrotlc
categories: notes
created: 2023-03-08
updated: 2023-09-12T16:43:51+0100
@end

* TODO
  - Add a rotation invariant regularizer loss (if not using a GNN or G-CNN).
  - Do not share parameters between actor and critic models.
  - Make sure at least X% of the original puzzle is present.
  -- Measure the overall performances and the performances on that original puzzle.
  - Curriculum learning.
  -- Capacité de faire plusieurs tailles de puzzle en même temps.
  -- Préciser la taille de chaque puzzle avec un token de condition.
  -- 2x2 original < 2x2 randoms < 3x3 original < 3x3 random < ...
  -- Tester une baseline où chaque difficulté est choisie uniformement pour entraîner
     le modèle.
  - Visualize some rollouts.
  -- Check if the model is locked in some local states.
  -- Check if the model is converging to the same local states across different rollouts.

* Questions
  - Is the model better with conv layers, transfo layers, or little bit of both?
  - Does the perf scale with model size really?
  - Should I use positional encoding or are the conv layers enough?
  - Is curriculum learning helpful?
  - Should I let the model train longer?
  - Does random instances help?
  - How to escape from the final plateau?

* Ideas
  - Do MCTS once the model is trained and see if it is better than the model alone.
  - Do a deeper head for each separate action.
  - Use MC sampling to sample the actions based on the result of the multiple simulations.
  - Once a model is trained, it is possible to do a soft MCTS:
  ~~ Start from a random state.
  ~~ Duplicate the state into many (many) batch games.
  ~~ Do a rollout with random sampling for each games in the batch.
  ~~ Aggregate the final results and apply the actions that led to the best final (maximum) state.
  ~~ Go back to point B
  -- This should enhance the overall search for a solution. It may be possible to apply this search
     with many different games in parallel, and to make the search over and over.
  -- It may be possible to implement this on multiple GPUs?
  - Do a continuously learning model.
  -- It could just play forever and constantly learn from its previous actions.
  - Instead of using an experience replay buffer, why don't I just play multiple subgames
    for each sample of the batch?
  -- Since playing a game is computionally light, it may be possible to play a lot of games
     in parallel.
  -- This is like a replay buffer, but with fresh samples (from the current policy) each time.
  - Could it be possible to coordinate the search among the batch? A kind of multi-agent
    search. Avoid states that are being searched by others.
  -- ex: VAE giving a sense of how close two game states are. By the end of a rollout
     I can reward agents that have looked away from other agents, and that have not
     stayed in the same states during its rollout.
  -- How is it possible to synchronize the search among the agents?
  -- Start by using the VAE to measure similarities between searched states (among
     a single rollout and among the multiple agents).
  - Asymmetric self-play
  -- An agent is trained to challenge another agent to solve the puzzle.
  -- The first agent starts from a random solved puzzle, and mixes the pieces however it wants.
  -- The second agent tries to solve it back.
  -- The second agent is also trained from time to time on the real target puzzle.
  -- The games should gradually increase in difficulty by doing so.
  -- See {https://arxiv.org/abs/1703.05407}.
  - Use ROPE positional encoding.
  - How to use random generated instances?
