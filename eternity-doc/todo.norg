@document.meta
title: todo
authors: pierrotlc
categories: notes
created: 2023-03-08
updated: 2023-08-04
@end

* TODO
  - ( ) Add a rotation invariant regularizer loss (if not using a GNN or G-CNN).
  - (_) Cut the rollout based on the last minimum score (remove the first useless moves).
  -- (_) Useless with the new reward base solely on the current state of the puzzle.
  - (x) Use a better rollout buffer, sample more and rollout less.
  - (x) Use a value network to quickly estimate the value of a state => shallow MCTS!
  - Do the full rollout inside the treesearch. Use the entire rollout to compute returns.
  -- (x) Better TD estimate.
  -- (x) Can do Generalized Advantage Estimation.
  -- (x) Add to the rollout buffer only at the end, when we have computed the return.
     How to dynamically compute the TD error if the value network is changing?
  -- (_) Option to add all the duplicated instance actions to the rollout or only the
     best ones.
  - Do not share parameters between actor and critic models.
  - Use a delta reward only.
  - Do not randomly reset the environments before each rollout.

* Ideas
  - Do MCTS once the model is trained and see if it is better than the model alone.
  - Do a deeper head for each separate action.
  - Use MC sampling to sample the actions based on the result of the multiple simulations.
  - Once a model is trained, it is possible to do a soft MCTS:
  ~~ Start from a random state.
  ~~ Duplicate the state into many (many) batch games.
  ~~ Do a rollout with random sampling for each games in the batch.
  ~~ Aggregate the final results and apply the actions that led to the best final (maximum) state.
  ~~ Go back to point B
  -- This should enhance the overall search for a solution. It may be possible to apply this search
     with many different games in parallel, and to make the search over and over.
  -- It may be possible to implement this on multiple GPUs?
  - Do a continuously learning model.
  -- It could just play forever and constantly learn from its previous actions.
  - Instead of using an experience replay buffer, why don't I just play multiple subgames
    for each sample of the batch?
  -- Since playing a game is computionally light, it may be possible to play a lot of games
     in parallel.
  -- This is like a replay buffer, but with fresh samples (from the current policy) each time.
  - Could it be possible to coordinate the search among the batch? A kind of multi-agent
    search. Avoid states that are being searched by others.
  -- ex: VAE giving a sense of how close two game states are. By the end of a rollout
     I can reward agents that have looked away from other agents, and that have not
     stayed in the same states during its rollout.
  -- How is it possible to synchronize the search among the agents?
  -- Start by using the VAE to measure similarities between searched states (among
     a single rollout and among the multiple agents).
